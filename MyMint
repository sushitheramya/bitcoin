// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract MyMint is ERC20, Ownable {

    string tokenName = "My minting smart contract."; // You set the name.
    string tokenSymbol = "MINT"; // You set the symbol.
    uint256 tokenDecimals = 18; // Most tokens use 18 decimal places.
    uint256 maxTokenSupply = 1000000 * (10 ** tokenDecimals); // You set the max supply.
    uint256 public lastMintTime; // Tracks last mint time for daily limit

    constructor() ERC20(tokenName, tokenSymbol) {
        // Token is created, but no tokens are minted initially.
    }

    function mintFunction(uint256 amountToMint) public onlyOwner {
        require(block.timestamp >= lastMintTime + 1 days, "Minting allowed only once per day");

        uint256 amountInDecimals = amountToMint * 10 ** tokenDecimals;
        uint256 currentSupply = totalSupply();

        require(currentSupply + amountInDecimals <= maxTokenSupply,
            "Minting the amount requested would exceed the max supply allowed.");

        lastMintTime = block.timestamp;
        _mint(msg.sender, amountInDecimals);
    }
}
